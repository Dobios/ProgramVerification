predicate time_credit()
method consume_time_credit()
    requires time_credit()

function math_pow(n: Int, e: Int): Int
    requires 0 <= e
{
    e == 0 ? 1 : n * math_pow(n, e - 1)
}

method lemma_pow(b: Int, y: Int)
    requires 0 <= y
    requires y % 2 == 0
    ensures math_pow(b, y) == math_pow(b * b, y / 2)

function pseudo_log(e: Int): Int 
    requires e > 0
    ensures result >= 0
{
    (e == 1) ? 0 : 1 + pseudo_log(e/2)
}

//Assures that in the case where y is positive, then so is log_y
method lemma_log(y: Int, log_y: Int)
    requires 0 <= y 
    ensures log_y >= 0

// TASK 1(c): "Fast" exponentiation
//
// Add time credit annotations to the following method.
//
// Remember to insert consume_time_credit() calls according to the background
// section in the project assignment.
//
// You may define additional functions or lemma methods, you may add ghost
// variables and arguments, and you may augment the method body as you see fit.
// Make sure the functional contract remains intact!
method fast_pow(n: Int, e: Int)
    returns (res: Int)
    requires 0 < e
    requires acc(time_credit(), (pseudo_log(e)+2)/1)
    ensures res == math_pow(n, e)
{
    consume_time_credit()
    var b: Int
    var y: Int

    //ghost variable
    var log_y: Int := pseudo_log(e)

    res := 1
    b := n
    y := e
    while (y > 0)
        invariant 0 <= y
        invariant res * math_pow(b, y) == math_pow(n, e)
        invariant 0 <= log_y && log_y <= pseudo_log(e) //Check that our manual log computation never grows larger than the expected result
        invariant acc(time_credit(), ((log_y)+1)/1)
    {
        consume_time_credit()
        if (y % 2 == 1) {
            lemma_pow(b, y - 1)
            res := res * b
        } else {
            lemma_pow(b, y)
        }
        y := y / 2
        b := b * b
        log_y := log_y - 1
        lemma_log(y, log_y)
    }
}
